---
import { getCollection, render } from "astro:content";
import {SHOW_BUY_BUTTON} from "astro:env/server"
import Layout from "../../layouts/Layout.astro";
import AmazonLogo from "../../components/AmazonLogo.astro";
import BookSCore from "../../components/BookSCore.astro";
import BuyButton from "../../components/BuyButton.astro";

//generar cada ruta estatica
export async function getStaticPaths()  { //funcion de astro
    const books = await getCollection("books"); //recuperamos todos los libros
    //devuelve todas las rutas que queremos que respondan con algo
    return books.map((book)=>({ //mapeamos el array
        params: {id: book.slug},
        props:{book}, 
    }))
        /* Si lo hiciera uno por uno
            {
                params:{id:"aprendiendo-git"},
                props:{title: "Aprendiendo Git y GitHub"},

            },
            {
                params:{id:"algoritmos"},
                props:{title: "Algoritmos"},

            },
            ...
            */
}
const {book} = Astro.props
const {data,slug} = book //pasamos toda la info del libro
const{title, author, img, readtime, description, buy} = data //dentro del libro sacamos todo el contenido
//const {title} = Astro.props
const {Content} = await render(book) //renderizar coleccion
//entre corchetes porque es dinamico
export const prerender = true
---


<Layout title={`${title} - Dev Books`}> 
    <div class="flex gap-12">
        <aside>
            <a href="/" class="hover:underline opacity-70">Volver atrás</a>
            <img transition:name={`img-${slug}`}  class="rounded w-72 h-auto" src={`/${img}`} alt={title} >
            <!--compra -->
            <BookSCore server:defer id={slug}>
                <!--mientras renderiza..cargando puntuacion -->
                <span slot="fallback" class="text-xs opacity-70">Cargando puntuación...</span>
            </BookScore>

            <!-- server:defer  (este componente no lo queremos estatico)-->
            {
                SHOW_BUY_BUTTON && <BuyButton server:defer buy={buy} />
                    
            }
        </aside>
        <main class="max-w-3xl">
            <h1 class="text-4xl font-bold mb-4">{title}</h1>
            <div class="prose prose-invert">
                <Content/> <!--renderizar el contenido del markdown -->
            </div>
        </main>  
    </div>    
</Layout>

        <!-- JAVASCRIPT -->
 <!-- se ejecuta en el cliente (no estará en el server)-->
<script>
    import { SCORE_API_ENDPOINT } from "astro:env/client";

    const scoreElement = document.querySelector('#score')
    
    fetch(SCORE_API_ENDPOINT)
        .then(res => res.text())
        .then(scoreValue => { 
            if(scoreElement){
                scoreElement.innerHTML=`Puntuacion: ${scoreValue.trim()}/5` //API que nos devuelve un valor random de puntuacion
            }

    })
</script>